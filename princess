#!/usr/bin/env python3

"""
Snakemake file waraper for princess.
"""
import argparse
import sys, os, subprocess, ntpath, yaml
from distutils.dir_util import copy_tree
import filecmp, shutil

# TODO: read the config.yaml file to know the aligner

def get_args():
    parser = argparse.ArgumentParser(epilog="%(prog)s version 0.01. use command -h for info.",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description='Produce phasing report',
                                     add_help=True, )
    parser.add_argument('-v', '--version', action='version', version='%(prog)s 0.01')

    parser.add_argument('-c', '--command', default="all", nargs='?', choices=['all', 'align', 'sv', 'phasing', 'overview'], help='Princess running command.')
    parser.add_argument('-s', '--samples_files', dest="samples_files", metavar= "sampleFiles" ,  nargs='+',  help='list of fatsa, fastq, or gz files.', required=True)
    parser.add_argument('-d', '--directory', help='Working directory.', metavar='Working directory', required=True)

    parser.set_defaults(func=run_princess)

    #if not argument print help.
    if len(sys.argv) == 1:
         parser.print_help(sys.stderr)
         sys.exit(1)

    args, unknownargs = parser.parse_known_args()


    if 'func' in args:
        args.func(args, unknownargs)
    else:
        parser.print_help()

def run_princess(args, unknownargs):
    current_dir = os.getcwd()
    running_file = os.path.dirname(os.path.realpath(__file__))
    work_dir = os.path.abspath(args.directory)
    samples = [os.path.abspath(i) for i in args.samples_files]
    samples_names = ""

    # creating DIRECTORY
    if not os.path.exists(work_dir):
        os.makedirs(work_dir)

    # get samples names and soft link them in the new directory
    for sample in samples:
        if not os.path.isfile(sample):
            print("This sample {} does not exist".format(sample))
            shutil.rmtree(work_dir)
            exit(1)
        absolute_name = ntpath.basename(sample)
        if not os.path.islink(os.path.join(work_dir, absolute_name)) and not os.path.isfile(os.path.join(work_dir, absolute_name)):
            os.symlink(sample, os.path.join(work_dir, absolute_name))
        if  samples_names:
            samples_names += " " + absolute_name
        else:
            samples_names += absolute_name

    sample_dir = 'sample_directory=' + work_dir
    sample_names = 'sample_list=' + samples_names
    snake_full_path = os.path.join(running_file, "Snakefile")
    compare_dir = filecmp.dircmp(running_file, work_dir)
    # print(compare_dir.left_only or compare_dir.right_only)
    # if compare_dir.left_only or compare_dir.right_only:

    # if we are already in main princess directory do nothing
    if os.path.samefile(running_file, work_dir):
        pass
    else:
        copy_tree(running_file, work_dir)

    os.chdir(work_dir)

    cluster_config = os.path.join(work_dir, "cluster_config.yaml")

    # loading info from yaml file (configfile)
    conf_yaml = ""
    with open(os.path.join(work_dir, "config.yaml"), 'r') as myyaml:
        conf_yaml = yaml.safe_load(myyaml)
    # for param in conf_yaml:
    #     if param["name"] == "sample_directory":
    #         param["value"] = work_dir
    #     if param["name"] == "sample_list":
    #         param["value"] = samples_names.split()
    # conf_yaml['sample_directory'] = work_dir
    # conf_yaml['sample_list'] = samples_names.split()
    # with open(os.path.join(work_dir, "config.yaml"), 'w') as myyaml:
    #     conf_yaml = yaml.dump(conf_yaml, myyaml)

    number_of_jobs = str(conf_yaml['cluster_jobs'])
    aligner = str(conf_yaml['aligner'])

    cluster = "qsub -A {cluster.account}  -l walltime={cluster.time} -q {cluster.queue} -l nodes=1:ppn={cluster.nCPUs} -l mem={cluster.memory}"

    if args.command.lower() == "overview":
        print(" ".join(['snakemake','-n', '-p', '-r', '--config', sample_dir, sample_names, *unknownargs]))
        subprocess.run(['snakemake', '-n', '-p', '-r', '--config',  sample_dir, sample_names, *unknownargs], check=True, universal_newlines=True)

    elif args.command.lower() == "all":
        subprocess.run(['snakemake',  '-p', '-j', number_of_jobs, '--cluster-config', cluster_config, '--cluster', cluster, '--config', sample_dir, sample_names, *unknownargs], check=True, universal_newlines=True)

    elif args.command.lower() == "align":
        result = os.path.join(work_dir, 'align/'+ aligner +'/data.bam')
        subprocess.run(['snakemake',  '-p', result, '-j', number_of_jobs, '--cluster-config', cluster_config, '--cluster', cluster, '--config', sample_dir, sample_names, *unknownargs], check=True, universal_newlines=True)

    elif args.command.lower() == "sv":
        result = os.path.join(work_dir, 'sv/'+ aligner +'/sniffles.vcf')
        subprocess.run(['snakemake',  '-p', result, '-j', number_of_jobs, '--cluster-config', cluster_config, '--cluster', cluster, '--config', sample_dir, sample_names, *unknownargs], check=True, universal_newlines=True)

    elif args.command.lower() == "phasing":
        result = os.path.join(work_dir, 'phased/'+ aligner +'/data.vcf')
        subprocess.run(['snakemake',  '-p', result, '-j', number_of_jobs, '--cluster-config', cluster_config, '--cluster', cluster, '--config', sample_dir, sample_names, *unknownargs], check=True, universal_newlines=True)

    clean(running_file, samples_names)
    os.chdir(current_dir)

def clean(source_dir, samples_names):
    file_list = os.listdir(source_dir)
    for f in samples_names.split(): os.remove(f)
    for f in file_list:
        if os.path.isfile(f):
            os.remove(f)
        else:
            shutil.rmtree(f)



def main():
    args = get_args()



if __name__ == "__main__":
    main()
