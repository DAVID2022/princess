#!/usr/bin/env python3

"""
Snakemake file waraper for princess.
"""
import argparse
import sys, os, subprocess, ntpath

# TODO: read the config.yaml file to know the aligner

def get_args():
    parser = argparse.ArgumentParser(epilog="%(prog)s version 0.01. use command -h for info.",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description='Produce phasing report',
                                     add_help=True, )
    parser.add_argument('-v', '--version', action='version', version='%(prog)s 0.01')

    parser.add_argument('-c', '--command', default="all", nargs='?', choices=['all', 'align', 'sv', 'phasing', 'overview'], help='Princess running command.')
    parser.add_argument('-s', '--samples_files', dest="samples_files", metavar= "sampleFiles" ,  nargs='+',  help='list of fatsa, fastq, or gz files.', required=True)
    parser.add_argument('-d', '--directory', help='Working directory.', metavar='Working directory', required=True)

    parser.set_defaults(func=run_princess)

    if not argument print help.
    if len(sys.argv) == 1:
         parser.print_help(sys.stderr)
         sys.exit(1)

    args, unknownargs = parser.parse_known_args()


    if 'func' in args:
        args.func(args, unknownargs)
    else:
        parser.print_help()

def run_princess(args, unknownargs):
    work_dir = args.directory
    samples = args.samples_files
    samples_names = ""
    # creating DIRECTORY
    print(work_dir)
    if not os.path.exists(work_dir):
        os.makedirs(work_dir)
    for sample in samples:
        absolute_name = ntpath.basename(sample)
        os.symlink(sample, os.path.join(work_dir, absolute_name))
        if  samples_names:
            samples_names += " " + absolute_name
        else:
            samples_names += absolute_name
    # soft link samples in the created directory
    sample_dir = 'sample_directory=' + work_dir
    sample_names = 'sample_list=' + samples_names
    if args.command.lower() == "overview":
        subprocess.run(['snakemake', '-n', '-p', '-r', '--config', sample_dir, sample_names, *unknownargs], check=True, universal_newlines=True)
    elif args.command.lower() == "all":
        subprocess.run(['snakemake', '-n', '-p', '-r', '--config', sample_dir, sample_names, *unknownargs], check=True, universal_newlines=True)
    elif args.command.lower() == "align":
        result = os.path.join(work_dir, 'align/minimap/data.bam')
        subprocess.run(['snakemake', '-n', '-p', '-r', result, '--config', sample_dir, sample_names, *unknownargs], check=True, universal_newlines=True)
    elif args.command.lower() == "sv":
        result = os.path.join(work_dir, 'sv/minimap/sniffles.vcf')
        subprocess.run(['snakemake', '-n', '-p', '-r', result, '--config', sample_dir, sample_names, *unknownargs], check=True, universal_newlines=True)
    elif args.command.lower() == "phasing":
        result = os.path.join(work_dir, 'phased/minimap/data.vcf')
        subprocess.run(['snakemake', '-n', '-p', '-r', result, '--config', sample_dir, sample_names, *unknownargs], check=True, universal_newlines=True)

def main():
    args = get_args()



if __name__ == "__main__":
    main()
